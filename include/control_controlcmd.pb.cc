// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_controlcmd.proto

#include "control_controlcmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace bridge {
constexpr ControlCmd::ControlCmd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , throttle_(0)
  , brake_(0)
  , steering_rate_(0)
  , steering_target_(0)
  , target_speed_(0)
  , parking_brake_(false)
  , gear_position_(0)

  , target_acc_(0){}
struct ControlCmdDefaultTypeInternal {
  constexpr ControlCmdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlCmdDefaultTypeInternal() {}
  union {
    ControlCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlCmdDefaultTypeInternal _ControlCmd_default_instance_;
}  // namespace bridge
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fcontrolcmd_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_control_5fcontrolcmd_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fcontrolcmd_2eproto = nullptr;

const uint32_t TableStruct_control_5fcontrolcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::ControlCmd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::ControlCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::ControlCmd, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::ControlCmd, throttle_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::ControlCmd, brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::ControlCmd, steering_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::ControlCmd, steering_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::ControlCmd, parking_brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::ControlCmd, target_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::ControlCmd, target_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::ControlCmd, gear_position_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  8,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::apollo::bridge::ControlCmd)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::bridge::_ControlCmd_default_instance_),
};

const char descriptor_table_protodef_control_5fcontrolcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030control_controlcmd.proto\022\rapollo.bridg"
  "e\032\014header.proto\032\024carsim_chassis.proto\"\200\002"
  "\n\nControlCmd\022%\n\006header\030\001 \001(\0132\025.apollo.co"
  "mmon.Header\022\020\n\010throttle\030\002 \001(\001\022\r\n\005brake\030\003"
  " \001(\001\022\025\n\rsteering_rate\030\004 \001(\001\022\027\n\017steering_"
  "target\030\005 \001(\001\022\025\n\rparking_brake\030\006 \001(\010\022\024\n\014t"
  "arget_speed\030\007 \001(\001\022\022\n\ntarget_acc\030\010 \001(\001\0229\n"
  "\rgear_position\030\t \001(\0162\".apollo.bridge.Car"
  "sim.GearPosition"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fcontrolcmd_2eproto_deps[2] = {
  &::descriptor_table_carsim_5fchassis_2eproto,
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fcontrolcmd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fcontrolcmd_2eproto = {
  false, false, 336, descriptor_table_protodef_control_5fcontrolcmd_2eproto, "control_controlcmd.proto", 
  &descriptor_table_control_5fcontrolcmd_2eproto_once, descriptor_table_control_5fcontrolcmd_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_control_5fcontrolcmd_2eproto::offsets,
  file_level_metadata_control_5fcontrolcmd_2eproto, file_level_enum_descriptors_control_5fcontrolcmd_2eproto, file_level_service_descriptors_control_5fcontrolcmd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_control_5fcontrolcmd_2eproto_getter() {
  return &descriptor_table_control_5fcontrolcmd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_control_5fcontrolcmd_2eproto(&descriptor_table_control_5fcontrolcmd_2eproto);
namespace apollo {
namespace bridge {

// ===================================================================

class ControlCmd::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlCmd>()._has_bits_);
  static const ::apollo::common::Header& header(const ControlCmd* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steering_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steering_target(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_parking_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_target_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_target_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gear_position(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apollo::common::Header&
ControlCmd::_Internal::header(const ControlCmd* msg) {
  return *msg->header_;
}
void ControlCmd::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ControlCmd::ControlCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.bridge.ControlCmd)
}
ControlCmd::ControlCmd(const ControlCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&throttle_, &from.throttle_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_acc_) -
    reinterpret_cast<char*>(&throttle_)) + sizeof(target_acc_));
  // @@protoc_insertion_point(copy_constructor:apollo.bridge.ControlCmd)
}

inline void ControlCmd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_acc_) -
    reinterpret_cast<char*>(&header_)) + sizeof(target_acc_));
}

ControlCmd::~ControlCmd() {
  // @@protoc_insertion_point(destructor:apollo.bridge.ControlCmd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ControlCmd::ArenaDtor(void* object) {
  ControlCmd* _this = reinterpret_cast< ControlCmd* >(object);
  (void)_this;
}
void ControlCmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.bridge.ControlCmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&throttle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_position_) -
        reinterpret_cast<char*>(&throttle_)) + sizeof(gear_position_));
  }
  target_acc_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlCmd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double throttle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_throttle(&has_bits);
          throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double brake = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_brake(&has_bits);
          brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steering_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_steering_rate(&has_bits);
          steering_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steering_target = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_steering_target(&has_bits);
          steering_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool parking_brake = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_parking_brake(&has_bits);
          parking_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double target_speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_target_speed(&has_bits);
          target_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double target_acc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_target_acc(&has_bits);
          target_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.bridge.Carsim.GearPosition gear_position = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::bridge::Carsim_GearPosition_IsValid(val))) {
            _internal_set_gear_position(static_cast<::apollo::bridge::Carsim_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlCmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.bridge.ControlCmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional double throttle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_throttle(), target);
  }

  // optional double brake = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_brake(), target);
  }

  // optional double steering_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_steering_rate(), target);
  }

  // optional double steering_target = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_steering_target(), target);
  }

  // optional bool parking_brake = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_parking_brake(), target);
  }

  // optional double target_speed = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_target_speed(), target);
  }

  // optional double target_acc = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_target_acc(), target);
  }

  // optional .apollo.bridge.Carsim.GearPosition gear_position = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_gear_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.bridge.ControlCmd)
  return target;
}

size_t ControlCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.bridge.ControlCmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional double throttle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double brake = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double steering_rate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double steering_target = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double target_speed = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional bool parking_brake = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.bridge.Carsim.GearPosition gear_position = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_position());
    }

  }
  // optional double target_acc = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlCmd::GetClassData() const { return &_class_data_; }

void ControlCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlCmd *>(to)->MergeFrom(
      static_cast<const ControlCmd &>(from));
}


void ControlCmd::MergeFrom(const ControlCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.bridge.ControlCmd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      throttle_ = from.throttle_;
    }
    if (cached_has_bits & 0x00000004u) {
      brake_ = from.brake_;
    }
    if (cached_has_bits & 0x00000008u) {
      steering_rate_ = from.steering_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      steering_target_ = from.steering_target_;
    }
    if (cached_has_bits & 0x00000020u) {
      target_speed_ = from.target_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      parking_brake_ = from.parking_brake_;
    }
    if (cached_has_bits & 0x00000080u) {
      gear_position_ = from.gear_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_target_acc(from._internal_target_acc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlCmd::CopyFrom(const ControlCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.bridge.ControlCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCmd::IsInitialized() const {
  return true;
}

void ControlCmd::InternalSwap(ControlCmd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlCmd, target_acc_)
      + sizeof(ControlCmd::target_acc_)
      - PROTOBUF_FIELD_OFFSET(ControlCmd, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlCmd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_5fcontrolcmd_2eproto_getter, &descriptor_table_control_5fcontrolcmd_2eproto_once,
      file_level_metadata_control_5fcontrolcmd_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bridge
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::bridge::ControlCmd* Arena::CreateMaybeMessage< ::apollo::bridge::ControlCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::bridge::ControlCmd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
