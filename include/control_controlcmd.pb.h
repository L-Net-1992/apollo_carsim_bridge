// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_controlcmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fcontrolcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fcontrolcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "carsim_chassis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fcontrolcmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fcontrolcmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fcontrolcmd_2eproto;
namespace apollo {
namespace bridge {
class ControlCmd;
struct ControlCmdDefaultTypeInternal;
extern ControlCmdDefaultTypeInternal _ControlCmd_default_instance_;
}  // namespace bridge
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::bridge::ControlCmd* Arena::CreateMaybeMessage<::apollo::bridge::ControlCmd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace bridge {

// ===================================================================

class ControlCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.bridge.ControlCmd) */ {
 public:
  inline ControlCmd() : ControlCmd(nullptr) {}
  ~ControlCmd() override;
  explicit constexpr ControlCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlCmd(const ControlCmd& from);
  ControlCmd(ControlCmd&& from) noexcept
    : ControlCmd() {
    *this = ::std::move(from);
  }

  inline ControlCmd& operator=(const ControlCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCmd& operator=(ControlCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlCmd* internal_default_instance() {
    return reinterpret_cast<const ControlCmd*>(
               &_ControlCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlCmd& a, ControlCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlCmd* New() const final {
    return new ControlCmd();
  }

  ControlCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlCmd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.bridge.ControlCmd";
  }
  protected:
  explicit ControlCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kThrottleFieldNumber = 2,
    kBrakeFieldNumber = 3,
    kSteeringRateFieldNumber = 4,
    kSteeringTargetFieldNumber = 5,
    kTargetSpeedFieldNumber = 7,
    kParkingBrakeFieldNumber = 6,
    kGearPositionFieldNumber = 9,
    kTargetAccFieldNumber = 8,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_MUST_USE_RESULT ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional double throttle = 2;
  bool has_throttle() const;
  private:
  bool _internal_has_throttle() const;
  public:
  void clear_throttle();
  double throttle() const;
  void set_throttle(double value);
  private:
  double _internal_throttle() const;
  void _internal_set_throttle(double value);
  public:

  // optional double brake = 3;
  bool has_brake() const;
  private:
  bool _internal_has_brake() const;
  public:
  void clear_brake();
  double brake() const;
  void set_brake(double value);
  private:
  double _internal_brake() const;
  void _internal_set_brake(double value);
  public:

  // optional double steering_rate = 4;
  bool has_steering_rate() const;
  private:
  bool _internal_has_steering_rate() const;
  public:
  void clear_steering_rate();
  double steering_rate() const;
  void set_steering_rate(double value);
  private:
  double _internal_steering_rate() const;
  void _internal_set_steering_rate(double value);
  public:

  // optional double steering_target = 5;
  bool has_steering_target() const;
  private:
  bool _internal_has_steering_target() const;
  public:
  void clear_steering_target();
  double steering_target() const;
  void set_steering_target(double value);
  private:
  double _internal_steering_target() const;
  void _internal_set_steering_target(double value);
  public:

  // optional double target_speed = 7;
  bool has_target_speed() const;
  private:
  bool _internal_has_target_speed() const;
  public:
  void clear_target_speed();
  double target_speed() const;
  void set_target_speed(double value);
  private:
  double _internal_target_speed() const;
  void _internal_set_target_speed(double value);
  public:

  // optional bool parking_brake = 6;
  bool has_parking_brake() const;
  private:
  bool _internal_has_parking_brake() const;
  public:
  void clear_parking_brake();
  bool parking_brake() const;
  void set_parking_brake(bool value);
  private:
  bool _internal_parking_brake() const;
  void _internal_set_parking_brake(bool value);
  public:

  // optional .apollo.bridge.Carsim.GearPosition gear_position = 9;
  bool has_gear_position() const;
  private:
  bool _internal_has_gear_position() const;
  public:
  void clear_gear_position();
  ::apollo::bridge::Carsim_GearPosition gear_position() const;
  void set_gear_position(::apollo::bridge::Carsim_GearPosition value);
  private:
  ::apollo::bridge::Carsim_GearPosition _internal_gear_position() const;
  void _internal_set_gear_position(::apollo::bridge::Carsim_GearPosition value);
  public:

  // optional double target_acc = 8;
  bool has_target_acc() const;
  private:
  bool _internal_has_target_acc() const;
  public:
  void clear_target_acc();
  double target_acc() const;
  void set_target_acc(double value);
  private:
  double _internal_target_acc() const;
  void _internal_set_target_acc(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.bridge.ControlCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  double throttle_;
  double brake_;
  double steering_rate_;
  double steering_target_;
  double target_speed_;
  bool parking_brake_;
  int gear_position_;
  double target_acc_;
  friend struct ::TableStruct_control_5fcontrolcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlCmd

// optional .apollo.common.Header header = 1;
inline bool ControlCmd::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool ControlCmd::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& ControlCmd::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& ControlCmd::header() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.ControlCmd.header)
  return _internal_header();
}
inline void ControlCmd::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.bridge.ControlCmd.header)
}
inline ::apollo::common::Header* ControlCmd::release_header() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* ControlCmd::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.bridge.ControlCmd.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* ControlCmd::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* ControlCmd::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.bridge.ControlCmd.header)
  return _msg;
}
inline void ControlCmd::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.bridge.ControlCmd.header)
}

// optional double throttle = 2;
inline bool ControlCmd::_internal_has_throttle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControlCmd::has_throttle() const {
  return _internal_has_throttle();
}
inline void ControlCmd::clear_throttle() {
  throttle_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ControlCmd::_internal_throttle() const {
  return throttle_;
}
inline double ControlCmd::throttle() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.ControlCmd.throttle)
  return _internal_throttle();
}
inline void ControlCmd::_internal_set_throttle(double value) {
  _has_bits_[0] |= 0x00000002u;
  throttle_ = value;
}
inline void ControlCmd::set_throttle(double value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.ControlCmd.throttle)
}

// optional double brake = 3;
inline bool ControlCmd::_internal_has_brake() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControlCmd::has_brake() const {
  return _internal_has_brake();
}
inline void ControlCmd::clear_brake() {
  brake_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double ControlCmd::_internal_brake() const {
  return brake_;
}
inline double ControlCmd::brake() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.ControlCmd.brake)
  return _internal_brake();
}
inline void ControlCmd::_internal_set_brake(double value) {
  _has_bits_[0] |= 0x00000004u;
  brake_ = value;
}
inline void ControlCmd::set_brake(double value) {
  _internal_set_brake(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.ControlCmd.brake)
}

// optional double steering_rate = 4;
inline bool ControlCmd::_internal_has_steering_rate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ControlCmd::has_steering_rate() const {
  return _internal_has_steering_rate();
}
inline void ControlCmd::clear_steering_rate() {
  steering_rate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double ControlCmd::_internal_steering_rate() const {
  return steering_rate_;
}
inline double ControlCmd::steering_rate() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.ControlCmd.steering_rate)
  return _internal_steering_rate();
}
inline void ControlCmd::_internal_set_steering_rate(double value) {
  _has_bits_[0] |= 0x00000008u;
  steering_rate_ = value;
}
inline void ControlCmd::set_steering_rate(double value) {
  _internal_set_steering_rate(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.ControlCmd.steering_rate)
}

// optional double steering_target = 5;
inline bool ControlCmd::_internal_has_steering_target() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ControlCmd::has_steering_target() const {
  return _internal_has_steering_target();
}
inline void ControlCmd::clear_steering_target() {
  steering_target_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double ControlCmd::_internal_steering_target() const {
  return steering_target_;
}
inline double ControlCmd::steering_target() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.ControlCmd.steering_target)
  return _internal_steering_target();
}
inline void ControlCmd::_internal_set_steering_target(double value) {
  _has_bits_[0] |= 0x00000010u;
  steering_target_ = value;
}
inline void ControlCmd::set_steering_target(double value) {
  _internal_set_steering_target(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.ControlCmd.steering_target)
}

// optional bool parking_brake = 6;
inline bool ControlCmd::_internal_has_parking_brake() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ControlCmd::has_parking_brake() const {
  return _internal_has_parking_brake();
}
inline void ControlCmd::clear_parking_brake() {
  parking_brake_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ControlCmd::_internal_parking_brake() const {
  return parking_brake_;
}
inline bool ControlCmd::parking_brake() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.ControlCmd.parking_brake)
  return _internal_parking_brake();
}
inline void ControlCmd::_internal_set_parking_brake(bool value) {
  _has_bits_[0] |= 0x00000040u;
  parking_brake_ = value;
}
inline void ControlCmd::set_parking_brake(bool value) {
  _internal_set_parking_brake(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.ControlCmd.parking_brake)
}

// optional double target_speed = 7;
inline bool ControlCmd::_internal_has_target_speed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ControlCmd::has_target_speed() const {
  return _internal_has_target_speed();
}
inline void ControlCmd::clear_target_speed() {
  target_speed_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double ControlCmd::_internal_target_speed() const {
  return target_speed_;
}
inline double ControlCmd::target_speed() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.ControlCmd.target_speed)
  return _internal_target_speed();
}
inline void ControlCmd::_internal_set_target_speed(double value) {
  _has_bits_[0] |= 0x00000020u;
  target_speed_ = value;
}
inline void ControlCmd::set_target_speed(double value) {
  _internal_set_target_speed(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.ControlCmd.target_speed)
}

// optional double target_acc = 8;
inline bool ControlCmd::_internal_has_target_acc() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ControlCmd::has_target_acc() const {
  return _internal_has_target_acc();
}
inline void ControlCmd::clear_target_acc() {
  target_acc_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double ControlCmd::_internal_target_acc() const {
  return target_acc_;
}
inline double ControlCmd::target_acc() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.ControlCmd.target_acc)
  return _internal_target_acc();
}
inline void ControlCmd::_internal_set_target_acc(double value) {
  _has_bits_[0] |= 0x00000100u;
  target_acc_ = value;
}
inline void ControlCmd::set_target_acc(double value) {
  _internal_set_target_acc(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.ControlCmd.target_acc)
}

// optional .apollo.bridge.Carsim.GearPosition gear_position = 9;
inline bool ControlCmd::_internal_has_gear_position() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ControlCmd::has_gear_position() const {
  return _internal_has_gear_position();
}
inline void ControlCmd::clear_gear_position() {
  gear_position_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::bridge::Carsim_GearPosition ControlCmd::_internal_gear_position() const {
  return static_cast< ::apollo::bridge::Carsim_GearPosition >(gear_position_);
}
inline ::apollo::bridge::Carsim_GearPosition ControlCmd::gear_position() const {
  // @@protoc_insertion_point(field_get:apollo.bridge.ControlCmd.gear_position)
  return _internal_gear_position();
}
inline void ControlCmd::_internal_set_gear_position(::apollo::bridge::Carsim_GearPosition value) {
  assert(::apollo::bridge::Carsim_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  gear_position_ = value;
}
inline void ControlCmd::set_gear_position(::apollo::bridge::Carsim_GearPosition value) {
  _internal_set_gear_position(value);
  // @@protoc_insertion_point(field_set:apollo.bridge.ControlCmd.gear_position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace bridge
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fcontrolcmd_2eproto
