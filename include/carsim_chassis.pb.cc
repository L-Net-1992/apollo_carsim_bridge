// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carsim_chassis.proto

#include "carsim_chassis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace bridge {
constexpr Carsim::Carsim(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , speed_mps_vx_(0)
  , speed_mps_vy_(0)
  , yaw_rate_(0)
  , angle_steering_(0)
  , angle_rate_steering_(0)
  , pos_x_egovehicle_(0)
  , pos_y_egovehicle_(0)
  , pos_z_egovehicle_(0)
  , angle_roll_egovehicle_(0)
  , angle_pitch_egovehicle_(0)
  , angle_yaw_egovehicle_(0)
  , gear_localtion_(0)

  , acc_x_egovehicle_(0)
  , acc_y_egovehicle_(0){}
struct CarsimDefaultTypeInternal {
  constexpr CarsimDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CarsimDefaultTypeInternal() {}
  union {
    Carsim _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CarsimDefaultTypeInternal _Carsim_default_instance_;
}  // namespace bridge
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_carsim_5fchassis_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_carsim_5fchassis_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_carsim_5fchassis_2eproto = nullptr;

const uint32_t TableStruct_carsim_5fchassis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, speed_mps_vx_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, speed_mps_vy_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, angle_steering_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, angle_rate_steering_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, pos_x_egovehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, pos_y_egovehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, pos_z_egovehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, angle_roll_egovehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, angle_pitch_egovehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, angle_yaw_egovehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, gear_localtion_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, acc_x_egovehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, acc_y_egovehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::bridge::Carsim, header_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, -1, sizeof(::apollo::bridge::Carsim)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::bridge::_Carsim_default_instance_),
};

const char descriptor_table_protodef_carsim_5fchassis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024carsim_chassis.proto\022\rapollo.bridge\032\014h"
  "eader.proto\"\303\004\n\006Carsim\022\024\n\014speed_mps_vx\030\001"
  " \001(\002\022\024\n\014speed_mps_vy\030\002 \001(\002\022\020\n\010yaw_rate\030\003"
  " \001(\002\022\026\n\016angle_steering\030\004 \001(\002\022\033\n\023angle_ra"
  "te_steering\030\005 \001(\002\022\030\n\020pos_x_egovehicle\030\006 "
  "\001(\002\022\030\n\020pos_y_egovehicle\030\007 \001(\002\022\030\n\020pos_z_e"
  "govehicle\030\010 \001(\002\022\035\n\025angle_roll_egovehicle"
  "\030\t \001(\002\022\036\n\026angle_pitch_egovehicle\030\n \001(\002\022\034"
  "\n\024angle_yaw_egovehicle\030\013 \001(\002\022:\n\016gear_loc"
  "altion\030\014 \001(\0162\".apollo.bridge.Carsim.Gear"
  "Position\022\030\n\020acc_x_egovehicle\030\r \001(\002\022\030\n\020ac"
  "c_y_egovehicle\030\016 \001(\002\022%\n\006header\030\017 \001(\0132\025.a"
  "pollo.common.Header\"\203\001\n\014GearPosition\022\020\n\014"
  "GEAR_NEUTRAL\020\000\022\016\n\nGEAR_DRIVE\020\001\022\020\n\014GEAR_R"
  "EVERSE\020\002\022\020\n\014GEAR_PARKING\020\003\022\014\n\010GEAR_LOW\020\004"
  "\022\020\n\014GEAR_INVALID\020\005\022\r\n\tGEAR_NONE\020\006"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_carsim_5fchassis_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_carsim_5fchassis_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_carsim_5fchassis_2eproto = {
  false, false, 633, descriptor_table_protodef_carsim_5fchassis_2eproto, "carsim_chassis.proto", 
  &descriptor_table_carsim_5fchassis_2eproto_once, descriptor_table_carsim_5fchassis_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_carsim_5fchassis_2eproto::offsets,
  file_level_metadata_carsim_5fchassis_2eproto, file_level_enum_descriptors_carsim_5fchassis_2eproto, file_level_service_descriptors_carsim_5fchassis_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_carsim_5fchassis_2eproto_getter() {
  return &descriptor_table_carsim_5fchassis_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_carsim_5fchassis_2eproto(&descriptor_table_carsim_5fchassis_2eproto);
namespace apollo {
namespace bridge {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Carsim_GearPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_carsim_5fchassis_2eproto);
  return file_level_enum_descriptors_carsim_5fchassis_2eproto[0];
}
bool Carsim_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Carsim_GearPosition Carsim::GEAR_NEUTRAL;
constexpr Carsim_GearPosition Carsim::GEAR_DRIVE;
constexpr Carsim_GearPosition Carsim::GEAR_REVERSE;
constexpr Carsim_GearPosition Carsim::GEAR_PARKING;
constexpr Carsim_GearPosition Carsim::GEAR_LOW;
constexpr Carsim_GearPosition Carsim::GEAR_INVALID;
constexpr Carsim_GearPosition Carsim::GEAR_NONE;
constexpr Carsim_GearPosition Carsim::GearPosition_MIN;
constexpr Carsim_GearPosition Carsim::GearPosition_MAX;
constexpr int Carsim::GearPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Carsim::_Internal {
 public:
  using HasBits = decltype(std::declval<Carsim>()._has_bits_);
  static void set_has_speed_mps_vx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed_mps_vy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_angle_steering(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_angle_rate_steering(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pos_x_egovehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pos_y_egovehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pos_z_egovehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_angle_roll_egovehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_angle_pitch_egovehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_angle_yaw_egovehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gear_localtion(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_acc_x_egovehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_acc_y_egovehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::common::Header& header(const Carsim* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::Header&
Carsim::_Internal::header(const Carsim* msg) {
  return *msg->header_;
}
void Carsim::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Carsim::Carsim(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.bridge.Carsim)
}
Carsim::Carsim(const Carsim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&speed_mps_vx_, &from.speed_mps_vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&acc_y_egovehicle_) -
    reinterpret_cast<char*>(&speed_mps_vx_)) + sizeof(acc_y_egovehicle_));
  // @@protoc_insertion_point(copy_constructor:apollo.bridge.Carsim)
}

inline void Carsim::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acc_y_egovehicle_) -
    reinterpret_cast<char*>(&header_)) + sizeof(acc_y_egovehicle_));
}

Carsim::~Carsim() {
  // @@protoc_insertion_point(destructor:apollo.bridge.Carsim)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Carsim::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void Carsim::ArenaDtor(void* object) {
  Carsim* _this = reinterpret_cast< Carsim* >(object);
  (void)_this;
}
void Carsim::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Carsim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Carsim::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.bridge.Carsim)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&speed_mps_vx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pos_y_egovehicle_) -
        reinterpret_cast<char*>(&speed_mps_vx_)) + sizeof(pos_y_egovehicle_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&pos_z_egovehicle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acc_y_egovehicle_) -
        reinterpret_cast<char*>(&pos_z_egovehicle_)) + sizeof(acc_y_egovehicle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Carsim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float speed_mps_vx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_speed_mps_vx(&has_bits);
          speed_mps_vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float speed_mps_vy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_speed_mps_vy(&has_bits);
          speed_mps_vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float yaw_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_yaw_rate(&has_bits);
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float angle_steering = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_angle_steering(&has_bits);
          angle_steering_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float angle_rate_steering = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_angle_rate_steering(&has_bits);
          angle_rate_steering_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_x_egovehicle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_pos_x_egovehicle(&has_bits);
          pos_x_egovehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_y_egovehicle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_pos_y_egovehicle(&has_bits);
          pos_y_egovehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_z_egovehicle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_pos_z_egovehicle(&has_bits);
          pos_z_egovehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float angle_roll_egovehicle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_angle_roll_egovehicle(&has_bits);
          angle_roll_egovehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float angle_pitch_egovehicle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_angle_pitch_egovehicle(&has_bits);
          angle_pitch_egovehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float angle_yaw_egovehicle = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_angle_yaw_egovehicle(&has_bits);
          angle_yaw_egovehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.bridge.Carsim.GearPosition gear_localtion = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::bridge::Carsim_GearPosition_IsValid(val))) {
            _internal_set_gear_localtion(static_cast<::apollo::bridge::Carsim_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float acc_x_egovehicle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_acc_x_egovehicle(&has_bits);
          acc_x_egovehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float acc_y_egovehicle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_acc_y_egovehicle(&has_bits);
          acc_y_egovehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Header header = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Carsim::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.bridge.Carsim)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float speed_mps_vx = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speed_mps_vx(), target);
  }

  // optional float speed_mps_vy = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_speed_mps_vy(), target);
  }

  // optional float yaw_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rate(), target);
  }

  // optional float angle_steering = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_angle_steering(), target);
  }

  // optional float angle_rate_steering = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_angle_rate_steering(), target);
  }

  // optional float pos_x_egovehicle = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pos_x_egovehicle(), target);
  }

  // optional float pos_y_egovehicle = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_pos_y_egovehicle(), target);
  }

  // optional float pos_z_egovehicle = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_pos_z_egovehicle(), target);
  }

  // optional float angle_roll_egovehicle = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_angle_roll_egovehicle(), target);
  }

  // optional float angle_pitch_egovehicle = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_angle_pitch_egovehicle(), target);
  }

  // optional float angle_yaw_egovehicle = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_angle_yaw_egovehicle(), target);
  }

  // optional .apollo.bridge.Carsim.GearPosition gear_localtion = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_gear_localtion(), target);
  }

  // optional float acc_x_egovehicle = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_acc_x_egovehicle(), target);
  }

  // optional float acc_y_egovehicle = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_acc_y_egovehicle(), target);
  }

  // optional .apollo.common.Header header = 15;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.bridge.Carsim)
  return target;
}

size_t Carsim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.bridge.Carsim)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional float speed_mps_vx = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float speed_mps_vy = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float yaw_rate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float angle_steering = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float angle_rate_steering = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float pos_x_egovehicle = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float pos_y_egovehicle = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional float pos_z_egovehicle = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float angle_roll_egovehicle = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float angle_pitch_egovehicle = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float angle_yaw_egovehicle = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional .apollo.bridge.Carsim.GearPosition gear_localtion = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_localtion());
    }

    // optional float acc_x_egovehicle = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float acc_y_egovehicle = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Carsim::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Carsim::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Carsim::GetClassData() const { return &_class_data_; }

void Carsim::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Carsim *>(to)->MergeFrom(
      static_cast<const Carsim &>(from));
}


void Carsim::MergeFrom(const Carsim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.bridge.Carsim)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      speed_mps_vx_ = from.speed_mps_vx_;
    }
    if (cached_has_bits & 0x00000004u) {
      speed_mps_vy_ = from.speed_mps_vy_;
    }
    if (cached_has_bits & 0x00000008u) {
      yaw_rate_ = from.yaw_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      angle_steering_ = from.angle_steering_;
    }
    if (cached_has_bits & 0x00000020u) {
      angle_rate_steering_ = from.angle_rate_steering_;
    }
    if (cached_has_bits & 0x00000040u) {
      pos_x_egovehicle_ = from.pos_x_egovehicle_;
    }
    if (cached_has_bits & 0x00000080u) {
      pos_y_egovehicle_ = from.pos_y_egovehicle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      pos_z_egovehicle_ = from.pos_z_egovehicle_;
    }
    if (cached_has_bits & 0x00000200u) {
      angle_roll_egovehicle_ = from.angle_roll_egovehicle_;
    }
    if (cached_has_bits & 0x00000400u) {
      angle_pitch_egovehicle_ = from.angle_pitch_egovehicle_;
    }
    if (cached_has_bits & 0x00000800u) {
      angle_yaw_egovehicle_ = from.angle_yaw_egovehicle_;
    }
    if (cached_has_bits & 0x00001000u) {
      gear_localtion_ = from.gear_localtion_;
    }
    if (cached_has_bits & 0x00002000u) {
      acc_x_egovehicle_ = from.acc_x_egovehicle_;
    }
    if (cached_has_bits & 0x00004000u) {
      acc_y_egovehicle_ = from.acc_y_egovehicle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Carsim::CopyFrom(const Carsim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.bridge.Carsim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Carsim::IsInitialized() const {
  return true;
}

void Carsim::InternalSwap(Carsim* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Carsim, acc_y_egovehicle_)
      + sizeof(Carsim::acc_y_egovehicle_)
      - PROTOBUF_FIELD_OFFSET(Carsim, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Carsim::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_carsim_5fchassis_2eproto_getter, &descriptor_table_carsim_5fchassis_2eproto_once,
      file_level_metadata_carsim_5fchassis_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bridge
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::bridge::Carsim* Arena::CreateMaybeMessage< ::apollo::bridge::Carsim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::bridge::Carsim >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
